{
  "title": "Enum based on previous selection",
  "schema": {
    "title": "Output",
    "type": "object",
    "properties": {
      "dummy": {
        "type": "string",
        "title": "A static field"
      }
    }
  },
  "startval": {
    "dummy": "Hello World"
  },
  "config": {
    "required_by_default": 1,
    "no_additional_properties": 1
  },
  "code": "var cfg = {\n  \"first\": {\n    \"label\": \"Habitat\",\n    \"children\": [\"water\", \"air\", \"ground\"]\n  },\n  \"water\": {\n    \"title\": \"Animal\",\n    \"label\": \"In Water\",\n    \"children\": [\"fish\", \"squid\", \"crab\"]\n  },\n  \"air\": {\n    \"title\": \"Animal\",\n    \"label\": \"In the Air\",\n    \"children\": [\"bird\", \"bat\", \"bee\", \"butterfly\"]\n  },\n  \"ground\": {\n    \"title\": \"Animal\",\n    \"label\": \"On the Ground\",\n    \"children\": [\"horse\", \"dog\"]\n  },\n  \"fish\": {\n    \"title\": \"Type of fish\",\n    \"label\": \"Fish\",\n    \"children\": [\"gooberfish\", \"klaus\", \"nemo\"]\n  },\n  \"squid\": {\n    \"label\": \"Squid\"\n  },\n  \"crab\": {\n    \"label\": \"Crab\"\n  },\n  \"bird\": {\n    \"label\": \"Bird\"\n  },\n  \"bat\": {\n    \"label\": \"Bat\"\n  },\n  \"bee\": {\n    \"label\": \"Bee\"\n  },\n  \"butterfly\": {\n    \"label\": \"Butterfly\"\n  },\n  \"horse\": {\n    \"label\": \"Horse\"\n  },\n  \"dog\": {\n    \"label\": \"Dog\"\n  },\n  \"gooberfish\": {\n    \"label\": \"Gooberfish\"\n  },\n  \"klaus\": {\n    \"label\": \"Klaus Heissler\"\n  },\n  \"nemo\": {\n    \"label\": \"Nemo\"\n  }\n};\n\n// The following lines are mandatory and readonly. You can add custom code above and below.\nif (jseditor instanceof window.JSONEditor) jseditor.destroy();\njseditor = new window.JSONEditor(document.querySelector(\"#json-editor-form\"), jedata);\n\nvar startval = jseditor.getValue();\nvar schema = jseditor.schema;\n\n// Build dynamic enum schema parts\nvar buildSchemaPart = function(key, dataArray) {\n\n  if (dataArray[key] && dataArray[key].children) {\n    var children = dataArray[key].children;\n\n    var enumVals = JSON.parse(JSON.stringify(children));\n    enumVals.unshift('');\n\n    var enumTitles = children.map(function(key) {\n      return dataArray[key].label;\n    });\n    enumTitles.unshift('Select');\n\n    schema.properties[key] = {\n      \"type\": \"string\",\n      \"title\": dataArray[key].title || dataArray[key].label,\n      \"enum\": enumVals,\n      \"options\": {\n        \"enum_titles\": enumTitles\n      }\n    };\n  }\n\n};\n\n// Remove unused children\nvar removeUnusedChildren = function(children, dataArray) {\n  children.forEach(function(key) {\n    delete schema.properties[key];\n    if (dataArray[key] && dataArray[key].children) {\n      removeUnusedChildren(dataArray[key].children, dataArray);\n    }\n  });\n};\n\n// Watch all dynamic fields\nvar setWatchers = function(dataArray) {\n  var path = 'root.';\n  Object.keys(dataArray).forEach(function(key) {\n\n    jseditor.watch(path + key, function() {\n      var ed = jseditor.getEditor(path + key);\n      var val = ed.getValue();\n      console.log('change detected in field: \"' + key + '\":', val);\n\n      startval = jseditor.getValue();\n      startval[key] = val;\n\n      if (dataArray[key].children) {\n        removeUnusedChildren(dataArray[key].children, dataArray);\n      }\n\n      generateForm(val, dataArray);\n\n    });\n\n  });\n};\n\n// Generate the form\nvar generateForm = function(key, dataArray) {\n\n  buildSchemaPart(key, dataArray);\n\n  // Regenerate the form\n  if (jseditor) jseditor.destroy();\n  jseditor = new window.JSONEditor(document.querySelector('#json-editor-form'), {\n    schema: schema, startval: startval\n  });\n\n  // Only required for reenabling update of the Playground Output Tab\n  jseditor.on('change', updateOutput);\n\n  setWatchers(dataArray);\n};\n\n\njseditor.on('ready', function() {\n  // Set the 1st field.\n  generateForm('first', cfg);\n});",  
  "style": "",
  "desc": "<p>This example generate dynamic selectboxes based on result from previous selectbox.</p>"
}